true
  : Bool
false
  : Bool
42
  : Nat
1
  : Nat
false
  : Bool
x : Bool
x
  : Bool
lambda x':Bool. x'
  : Bool -> Bool
true
  : Bool
id = lambda x':Bool. x'
  : Bool -> Bool
true
  : Bool
tru = lambda t:Nat. lambda f:Nat. t
  : Nat -> Nat -> Nat
fls = lambda t:Nat. lambda f:Nat. f
  : Nat -> Nat -> Nat
test = lambda l:Nat->Nat->Nat. lambda m:Nat. lambda n:Nat. l m n
  : (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
33
  : Nat
pair = lambda f:Nat. lambda s:Nat. lambda b:Nat->Nat->Nat. b f s
  : Nat -> Nat -> (Nat -> Nat -> Nat) -> Nat
fst = lambda p:(Nat->Nat->Nat)->Nat. p tru
  : ((Nat -> Nat -> Nat) -> Nat) -> Nat
snd = lambda p:(Nat->Nat->Nat)->Nat. p fls
  : ((Nat -> Nat -> Nat) -> Nat) -> Nat
33
  : Nat
c0 = lambda s:Nat->Nat. lambda z:Nat. z
  : (Nat -> Nat) -> Nat -> Nat
c1 = lambda s:Nat->Nat. lambda z:Nat. s z
  : (Nat -> Nat) -> Nat -> Nat
c2 = lambda s:Nat->Nat. lambda z:Nat. s (s z)
  : (Nat -> Nat) -> Nat -> Nat
c3 = lambda s:Nat->Nat. lambda z:Nat. s (s (s z))
  : (Nat -> Nat) -> Nat -> Nat
scc = lambda n:(Nat->Nat)->Nat->Nat. lambda s:Nat->Nat. lambda z:Nat. s (n s z)
  : ((Nat -> Nat) -> Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
lambda s:Nat->Nat. lambda z:Nat. s ((lambda s':Nat->Nat. lambda z':Nat. s' z') s z)
  : (Nat -> Nat) -> Nat -> Nat
plus = lambda m:(Nat->Nat)->Nat->Nat. lambda n:(Nat->Nat)->Nat->Nat. lambda s:Nat->Nat. lambda z:Nat. m s (n s z)
  : ((Nat -> Nat) -> Nat -> Nat) -> ((Nat -> Nat) -> Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
lambda s:Nat->Nat. lambda z:Nat. (lambda s':Nat->Nat. lambda z':Nat. s' (s' z')) s ((lambda s':Nat->Nat. lambda z':Nat. s' (s' z')) s z)
  : (Nat -> Nat) -> Nat -> Nat
realnat = lambda m:(Nat->Nat)->Nat->Nat. m (lambda x':Nat. (succ x')) 0
  : ((Nat -> Nat) -> Nat -> Nat) -> Nat
3
  : Nat
4
  : Nat
r = <loc #0>
  : Ref Nat
5
  : Nat
unit
  : Unit
7
  : Nat
8
  : Nat
9
  : Nat
13
  : Nat
s = <loc #0>
  : Ref Nat
unit
  : Unit
82
  : Nat
c = <loc #1>
  : Ref Nat
incc = lambda x':Unit. (lambda _:Unit. ! c) (c := (succ (! c)))
  : Unit -> Nat
decc = lambda x':Unit. (lambda _:Unit. ! c) (c := pred (! c))
  : Unit -> Nat
1
  : Nat
0
  : Nat
equal = lambda x':Nat. lambda y:Nat. if iszero x' then if iszero y then true elsefalse elseif iszero y then false elsefix (lambda eq:Nat->Nat->Bool. lambda x'':Nat. lambda y':Nat. if iszero x'' then if iszero y' then true elsefalse elseif iszero y' then false elseeq (pred x'') (pred y')) (pred x') (pred y)
  : Nat -> Nat -> Bool
newarray = lambda _:Unit. ref (lambda n:Nat. 0)
  : Unit -> (Ref (Nat -> Nat))
lookup = lambda a:Ref (Nat->Nat). lambda n:Nat. ! a n
  : (Ref (Nat -> Nat)) -> Nat -> Nat
update = lambda a:Ref (Nat->Nat). lambda m:Nat. lambda v:Nat. (lambda oldf:Nat->Nat. a := (lambda n:Nat. if equal m n then v elseoldf n)) (! a)
  : (Ref (Nat -> Nat)) -> Nat -> Nat -> Unit
a = <loc #2>
  : Ref (Nat -> Nat)
0
  : Nat
0
  : Nat
unit
  : Unit
unit
  : Unit
unit
  : Unit
5
  : Nat
4
  : Nat
3
  : Nat
