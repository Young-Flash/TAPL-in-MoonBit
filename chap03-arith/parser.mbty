%derive<Show> Token
%derive<Show> ParseError
%position<Pos>
%start toplevel

%token EOF
%token ELSE         "else"
%token FALSE        "false"
%token IF           "if"
%token IMPORT       "import"
%token ISZERO       "iszero"
%token PRED         "pred"
%token SUCC         "succ"
%token THEN         "then"
%token TRUE         "true"
%token<Int> INTV
%token<String> STRINGV
%token LPAREN       "("
%token RPAREN       ")"
%token SEMI         ";"

%type<ParseToplevel> toplevel
%type<ParseCommand> command
%type<ParseTerm> term
%type<ParseTerm> app_term
%type<ParseTerm> atom_term

%%

toplevel
  : EOF                                 { Nil }
  | command ";" toplevel                { Cons($1, $3) }
  ;

command
  : "import" STRINGV                    { Import($2) }
  | term                                { Eval(FI($startpos, $endpos), $1) }
  ;

term
  : app_term                            { $1 }
  | "if" term "then" term "else" term   { If(FI($startpos, $endpos), $2, $4, $6) }
  ;

app_term
  : atom_term                           { $1 }
  | "succ" atom_term                    { Succ(FI($startpos, $endpos), $2) }
  | "pred" atom_term                    { Pred(FI($startpos, $endpos), $2) }
  | "iszero" atom_term                  { IsZero(FI($startpos, $endpos), $2) }
  ;

atom_term
  : "(" term ")"                        { $2 }
  | "true"                              { True(FI($startpos, $endpos)) }
  | "false"                             { False(FI($startpos, $endpos)) }
  | INTV                                {
      let info = FI($startpos, $endpos)
      loop ($1, Zero(info)) {
        (0, acc) => break acc
        (n, acc) => continue (n - 1, Succ(info, acc))
      }
    }
  ;
